Advanced Statistics
========================================================
author: Bernhard Angele 
date: Lecture 3

Comparing multiple groups
========================================================
- t-tests are nice if you only have two groups that you want to compare.
- But maybe you have more groups
- Example:
> A researcher wants to find out if there is a systematic difference in intelligence between MSc students from different universities. She performs intelligence tests on 10 students each from BU, University of Southampton and Oxford University and records the results.

Making fake data for our example
========================================================
- Let's assume that the true state of affairs is that there is no difference in intelligence
  - $H_0: \mu_1 = \mu_2 = \mu_3$
  - The alternative hypothesis is that the population means differ (but we don't specify a direction, hence we'll do a two-tailed test)
- In that case, all intelligence scores would come from the same distribution: a normal distribution with mean = 100 and sd = 15
- Let's generate 3 data sets according to this criterion
```{r, echo=FALSE}
# The following line sets the random number generator to a specific state
# and ensures that you get the same numbers that I did.
set.seed("16102014")
bu <- rnorm(n = 10, mean = 100, sd = 15)
soton <- rnorm(n = 10, mean = 100, sd = 15)
oxford <- rnorm(n = 10, mean = 100, sd = 15)
```

Simulating data with Excel
========================================================
- `=RAND()` will give you a random number between 0 and 1 (continuous uniform distribution, if you must know)
- `=NORM.INV(probability, mean, sd)` will take a probability (= left tail proportion) and give you the corresponding x-value from the distribution
- combine the two, and you get random samples from a normal distribution: `=NORM.INV(RAND(), mean, sd)`

Let's make some random samples for our simulation
========================================================
- Make a spreadsheet, add three column headers (BU, Soton, Oxford)
    - Below the group headers, generate 10 samples each using the formula `=NORM.INV(RAND(), 100, 15)`
- Note that the null hypothesis is true here: all values come from the same normal distribution
- Let's do t-tests first
  - How many would we need?
    - 3: BU vs. Soton, BU vs. Oxford, Soton vs. Oxford
- Let's pretend that we (just like in real life) don't know the true properties of the population (so we use *t*-tests)
  
t-tests in Excel
========================================================
- Simple, just follow the formulas
- First, calculate the mean and variance for each sample
- Then calculate the t-value based on the formula I gave you in the last lecture:
$$t = \frac{(\bar{x}_1 - \bar{x}_2)}{\sqrt{\frac{s_1^2}{n_1} + \frac{s_2^2}{n_2}}}$$
- In this case, the Excel version of the formula above will be `=(MEAN1-MEAN2)/SQRT((SD1^2/10)+(SD2^2/10))`
      - Replace `MEAN1`, `MEAN2`, `SD1`, and `SD2` with the actual cells that these values are in (e.g. `A12`)

t-tests in Excel (2)
========================================================
- Now use `=T.DIST.2T(ABS(TVALUE), DF)` to get the p-value for a two-tailed test
  - Replace `TVALUE` and `DF` with the cells containing those values
    - What should the DF be? Let's first assume that the population variances are equal (as they should be if these really come from the same population). In that case, the DF should be `n_1+n_2-2`. So, in our example with two groups of 10, it should be 18.
  - Why `T.DIST.2T`? This will give us the two-tailed p-value (we could also use 1-T.DIST and multiply the result by 2)
  - Why `ABS(TVALUE)`? If $\bar{x_1} < \bar{x_2}$, the *t*-value will be negative. Since the t-distribution is symmetrical, it's easiest to just use the absolute t-value ($|t|$, i.e. the t-value without the sign) and get the area under the curve in the right tail

A quick plot to visualise this
=========================================================
- The 2.5% lower and upper tails are highlighted. They have exactly the same area, so we could also just use double the area of the upper tail. This is exaclty what `T.DIST.2T` does.
```{r, echo = F}
cord.x <- seq(-3,3,0.01)
cord.y <- dt(cord.x, df = 18)
cord.y[cord.x > qt(.025, df =18) & cord.x < qt(.975, df =18)] <- dt(-3, df = 18)
curve(dt(x, df =18),xlim=c(-3,3),main='t(df=18)')
polygon(cord.x,cord.y,col='skyblue')
```

t-tests in Excel (3)
========================================================
- Believe it or not, Excel also has its own *t*-test function: `=T.TEST(ARRAY1, ARRAY2, TAILS, TYPE)`
    - `ARRAY1` is the data from the first group (e.g. A2:A11, if your data are in those cells)
    - `ARRAY2` is the data from the second group (e.g. A2:A11, if your data are in those cells)
    - `TAILS`: `1` for a one-tailed test, `2` for a two-tailed test
    - `TYPE`: `1` for a paired *t*-test, `2` for a two-group *t*-test with equal variances, `3` for a two-group *t*-test with unequal variances
- The test we just did by hand is a two-tailed test with equal variances
- Confirm that you get the same result using `T.TEST` as you did by hand. If you don't, you did something wrong.

t-tests in Excel (4)
========================================================
- If you set `TYPE` to `3`, you get Welch's t-test. This corrects the degrees of freedom to account for unequal variances.
- Do a Welch's *t*-test on the same data and compare the results with the *t*-test assuming equal variances. What changes?

BU vs Soton
=========================================================
- In case you don't have Excel handy, here I'm doing the same tests in R:
```{r}
t.test(bu, soton)
```

BU vs Oxford
=========================================================
- In case you don't have Excel handy, here I'm doing the same tests in R:
```{r}
t.test(bu, oxford)
```

Soton vs Oxford
=========================================================
- In case you don't have Excel handy, here I'm doing the same tests in R:
```{r}
t.test(soton, oxford)
```

Anything wrong with that?
========================================================
- We are doing three independent t-tests
- Each t-test has a 5% chance of producing a spurious result ($\alpha$)
- What is the chance that we get at least one spuriously significant result?
  - It's 1 - the chance that we get no spurious results
  - $1 - .95*.95*.95 = .14$
  - We have a problem: our $\alpha$ is almost three times as high as it should be.
  - SPSS calls this "correction" (which really isn't one) LSD (least significant differences) - don't use it!

Exercise: Give it a try
=========================================================
- Instead of running the simulation just my computer, I'll run it on **you**
- What I mean by that:
  - Generate three data sets in Excel like I've just shown you
  - Make sure that all three data sets are samples from the same normal distribution: Same mean and sd, of course same n as well
  - Run three two-sample *t*-tests (assuming equal variances) comparing the means
  - Re-generate the random variables 20 times (you can do that by simply double-clicking on any empty cell and changing it)
  - Afterwards, I will ask you and count how many significant t-tests you observed (p < .05).
  - If the $\alpha$ level isn't inflated, you should not observe much more than 1 (5% is 1 in 20).

Solutions
=========================================================
- We can adjust the $\alpha$ level of each t-test:
  - If we divide the alpha level by the number of tests, we get $.05/3 = .0167$
  - Our total $\alpha$ is then: $1-(1-.05/3)^3 = .049$
  - This is called a **Bonferroni correction**
  - Problem solved?
  - Yes, but the lower the $\alpha$ level, the lower the power.
- Better ways (but still lowering power):
  - Holm-Bonferroni (same principle as Bonferroni, but better power)
  - Tukey's HSD (honestly significant differences)
- Maybe we just want to know if there is a difference at all between any of these three means
  - One-way ANOVA

Analysis of Variance
========================================================
- The idea behind the analysis of variance is simple: We want to split the total variance in our data into variance explained by our grouping factor and random noise (error) variance.
- If the grouping factor explains more of the variance than we would expect based on random noise, then we can conclude that the grouping factor *significantly* improves our model (because yes, an ANOVA is a very simple statistical model)
- In other words, we can conclude that at least two of the factor levels are significantly different

Analysis of Variance (2)
========================================================
- How do we compare variances? We divide them!
- First, a bit of terminology. As you should remember, we can estimate the population variance from the sample variance:
$$ \hat{\sigma}^2 = s^2 = \frac{\sum\limits_{i = 1}^{n}(x_i - \bar{x})^2}{n-1}$$
- Let's change the names a little to better fit the ANOVA model: since the data will come in different groups (factor levels), let's use the index $i$ to denote the factor level and the index $m$ to denote the $m^{th}$ observation (e.g. the $m^{th}$ person) within each factor level
- Let's also call the number of factor levels $p$ and the number of observations per level $n$ (this is different from the way we have used $n$ so far).

Anova matrix
========================================================
- Columns are factor levels, rows are observations within a level
- $i$ = factor level, $p$ = number of factor levels
- $m$ = observation, $n$ = number of observations per factor level

$$
\begin{matrix}
x_{11} &  x_{12}  & \ldots & x_{1i} & \ldots & x_{1p}\\
x_{21} &  x_{22}  & \ldots & x_{2i} & \ldots & x_{2p}\\
\vdots & \vdots   &       & \vdots  &        &\vdots \\
x_{m1} &  x_{m2}  & \ldots & x_{mi} & \ldots & x_{mp}\\
\vdots & \vdots   &       & \vdots  &        &\vdots \\
x_{n1} &  x_{n2}  & \ldots & x_{ni} & \ldots & x_{np}\\
\end{matrix}
$$

Analysis of Variance (2)
========================================================
- With this new terminology, our formula looks like this (remember the double sum operator!):
$$ \hat{\sigma}^2 = s^2 = \frac{\sum\limits_{m=1}^{n}\sum\limits_{i = 1}^{p}(x_{mi} - \bar{x})^2}{n\cdot p-1}$$
- In ANOVA terminology, we call the **numerator** of this equation the **sum of squares of the total variance** or ${SS}_{tot}$ for short.
- So, ${SS}_{tot} = \sum\limits_{m=1}^{n}\sum\limits_{i = 1}^{p}(x_{mi} - \bar{x})^2$
- We call the **denominator** of this equation the **degrees of freedom of the total variance** or ${df}_{tot}$ for short.
- So, ${df}_{tot} = n\cdot p-1$

Partitioning the variance
=======================================================
- Now we can start the interesting part of actually dividing up the variance into variance explained by the factor and unexplained error variance:
- First, we compute the estimate of the variance explained by our factor. We call the corresponding sum of squares ${SS}_{model}$ (remember, an ANOVA is a statistical model. This will become important later).

The model variance
========================================================
- Some textbooks also call this the **treatment** variance.
- In ANOVA terminology, we call the means of the observations in each level of our factor $\bar{A}_i$. (Why A? Well, in more complex designs, there might be a Factor B!). $${SS}_{model} = \sum\limits_{i = 1}^{p}n\cdot(\bar{A}_i - \bar{x})^2 = n\cdot\sum\limits_{i = 1}^{p}(\bar{A}_i - \bar{x})^2$$
- This gives us the variance that we would get if each observation were exactly equal to the group (factor level) mean
    - i.e. if all the variance were **between** groups, and none **within**

Running an ANOVA -- by hand! (2)
========================================================
- Now we need an estimate of the variance explained by `group`
- $SS_{model} = n_k(\bar{x}_k - \bar{x})^2$, where $\bar{x}_k$ denotes the mean for each group, $n_k$ is the number of subjects in each group, and $\bar{x}$ is the grand mean of the data.
```{r}
bu_mean <- mean(subset(iqdata, group == "BU")$iq)
soton_mean <- mean(subset(iqdata, group == "Soton")$iq)
oxford_mean <- mean(subset(iqdata, group == "Oxford")$iq)
n <- 10

(SS_model <- sum(n*(bu_mean - mean(iqdata$iq))^2, n*(soton_mean - mean(iqdata$iq))^2, n*(oxford_mean - mean(iqdata$iq))^2))
```

Running an ANOVA -- by hand! (3)
========================================================
- Now get an estimate of the variance that is *not* explained by `group`, i.e. the error.
- Easy: Just subtract $SS_{model}$ from $SS_{total}$.
- $SS_{error} = SS_{total} - SS_{model}$
```{r}
(SS_error <- SS_tot - SS_model)
```

Running an ANOVA -- by hand! (4)
========================================================
- With $SS_{model}$ and $SS_Error$, we can compute the ratio of explained variance to error (or unexplained) variance.
- First, we need to take into account the number of measurements which went into each SS
- These are called the degrees of freedom
- This is equivalent to calculating the variance as a descriptive statistic ($SS/df$)
- $df_{total} = n*k-1$, where $n$ is the number of observations per group (10) and $k$ is the number of groups
  - Why -1? Very good question. Short answer: Whenever we want to make conclusions about the population, we use n-1 instead of n.
  - Long answer (if you are REALLY interested and won't shut up about it): [Here](http://nebula.deanza.edu/~bloom/Math10/M10DivideBy_nminus1.pdf)
  
Running an ANOVA -- by hand! (5)
========================================================
- $df_{total} = n \cdot k-1$
- $df_{model} = k-1$, where $k$ is the number of groups.
- $df_{error} = df_{total} - df_{error} = n \cdot k - k$
```{r}
k <- 3
(df_total <- n * k - 1)
(df_model <- k - 1)
(df_error <- n * k - k)
```

Running an ANOVA -- almost done!
========================================================
- Now we compute the mean squares (MS) as an estimate of the variance
- $MS_{model} = \frac{SS_{model}}{df_{model}}$
- $MS_{error} = \frac{SS_{error}}{df_{error}}$

```{r}
(MS_model <- SS_model/df_model)
(MS_error <- SS_error/df_error)
```
Running an ANOVA -- final steps!
========================================================
- Finally, we take the ratio of the two.
- $F_(df_{model}, df_{error}) = \frac{MS_{model}}{MS_{error}}$
```{r}
(F_value <- MS_model/MS_error)
```

What to do with this F-value
========================================================
- It turns out that the ratio between model and error variance follows a specific distribution
  - If there is no actual effect (!) and
  - As long as certain assumptions are valid (more on that later)
- This distribution is called the F-distribution
- Occasionally you will get a high $MS_{model}$ simply by chance, but such occurrences are quite rare
- The F-distribution is the probability density function for different values of the variance ratio, i.e. the F-value.
- We essentially want to test if the F-value we get is extreme enough that it could only have occurred by chance 5% of the time (our $\alpha$ level)

The F-distribution
=========================================================
- Like the *t*-distribution, the shape of the F-distribution varies depending on sample size (degrees of freedom).
- Remember that F is a *ratio* of two variances.
  - Because of this, the F distribtion has *two* degrees of freedom parameters
    - $df_{numerator}$
    - $df_{denominator}$
- Guess what the R functions for the F distribution are called
  - That's right: `df`, `pf`, `qf`, `rf`
  
Plotting it
==========================================================
- Let's take a look
```{r}
curve(df(x, df1 = 1, df2 = 30), from = -3, to = 3)
```
- Looks like x can't be negative
  - this makes sense: you can't have negative variance

Plotting it (2)
==========================================================
- Adjusting the x-axis
```{r}
curve(df(x, df1 = 1, df2 = 30), from = 0, to = 6)
```

The F distribution
==========================================================
```{r}
curve(df(x, df1 = 1, df2 = 30), from = 0, to = 6, main = "F(1,30)")
```

The F distribution (2)
==========================================================
```{r}
curve(df(x, df1 = 3, df2 = 30), from = 0, to = 6, main = "F(3,30)")
```


The F distribution (3)
==========================================================
```{r}
curve(df(x, df1 = 10, df2 = 30), from = 0, to = 6, main = "F(10,30)")
```


The F distribution (4)
==========================================================
```{r}
curve(df(x, df1 = 10, df2 = 10), from = 0, to = 6, main = "F(10,10)")
```

Finally finishing that ANOVA
=========================================================
- So, how extreme is our F-value given the $H_0$?
- Let's get the p-value for our F-value
```{r}
(p_value <- 1 - pf(F_value, df1 = df_model, df2 = df_error))
```
It's 1 - pf since pf gives you the probability for an F value to be smaller than the value given. We want the opposite.
If $p \leq .05$, the effect of group is significant (spuriously in this case, since we know there was no effect).

Can we just let R do it?
==========================================================
- Remember the formula format for the t-test command:
```{r}
summary(aov(formula = iq ~ group, data = iqdata))
```
- `summary()` is necessary here to get the p-value
- This is just a convention in r

A different way, using a package
==========================================================
```{r}
library(ez)
# ezANOVA wants a subject identifier, so let's generate one
# every row is a different subject, so we just need to make a new variable that numbers the rows
iqdata$subnum <- 1:30
```

ezANOVA
===========================================================
```{r}
(iq_anova <- ezANOVA(iqdata, dv = iq, wid = subnum, between = group))
```
- Nice. What's `ges` and what is that second output?

Effect size
===========================================================
- `ges` = generalised eta squared
- $\eta^2 = \frac{SS_{model}}{SS_{total}}$
- $\eta_G^2$ is $\eta^2$ with a correction for repeated measures designs (if applicable; we'll talk about those later)
- $\eta^2$ is an estimate of the relationship between variance explained by the ANOVA model and total variance in the data
- Compare this to Cohen's $d$, another estimate of effect size:
  - $d$ = $\frac{\bar{x_1} - \bar{x_2}}{s}$
  - Cohen's $d$ is an estimate of how large a difference in means is (in standard deviations)
  - What is $s$? The standard deviation of the difference in means (from your sample)
  
Levene's test for homogeneity of variance
===========================================================
```{r}
iq_anova[2] # get the second element of the list iq_anova
```
- When you perform an ANOVA, you make the assumption that the variances within each group are similar
  - For example, the IQs *within* the BU group should not be more variable than the IQs *within* the Soton and the Oxford groups
  - Levene's test compares the group variances
    - What's the test statistic for a test that compares variances? It's *F*!
    - The p-value tells you if the variances are significantly different between groups.

Levene's test for homogeneity of variance
===========================================================
- You do not need Levene's test if you only have two independent groups (and ezANOVA won't do it then)
- If Levene's test is not significant, all is well
- If Levene's test is significant, you're violating the homogeneity of variance assumption
  - Not a big issue if the sample sizes are equal for all groups (balanced design)
  - If sample sizes aren't equal (unbalanced design) and the larger groups have higher variance, your ANOVA loses power
  - If sample sizes aren't equal and the larger groups have lower variance, your ANOVA becomes anti-conservative ($\alpha$ increases)!

Alternative: Bartlett's test
============================================================
```{r}
bartlett.test(formula = iq ~ group, data = iqdata)
```
- Bartlett's test is more sensitive to deviations from normality than Levene's test
- It's up to you which one you want to use (with ezANOVA, Levene's test is more convenient)

What to do if Levene's or Bartlett's tests are significant
============================================================
- If your group sizes are equal, nothing to worry about.
- If not:
  - Calculate the variance for each group and see if you're dealing with just a power issue or an $\alpha$ issue
  - If the largest group variance is less than 4 times the smallest group variance, you're good.
  - If you have huge variance differences and there might be an $\alpha$ issue:
    - Easiest solution: Fix the sample size issue (e.g. run more participants)!
    - Use linear mixed models (LMMs; more on that later)
    - Use specialised tests (this is SPSS's approach):
      - Welch's t-test (R has this test as `oneway.test()`)
      - Brown-Forsythe instead of ANOVA (R has this test in the `lawstats` package)
      - Post-hoc tests:
          - Games-Howell for unequal variance
          - Hochberg's GT2 for non-equal sample sizes

The SPSS approach to statistics
============================================================
- Throw as many obscure tests at the problem as you can
  - This is a sales strategy: "We need to buy SPSS since no other program has the Games-Howell test!"
- In reality, the standard ANOVA is remarkably robust to all but the most extreme violations of its assumptions
- Specialised tests often come at a huge cost in terms of power
- This doesn't mean that you shouldn't test the assumptions
  - But a simplistic strategy where you run one type of test if the assumption test is significant and another one if it isn't is not helpful
  - Take a good look at your data
    - Be aware of potential issues
    - Interpret the data accordingly.
    - Only use specialised and non-parametric tests as a last resort if your data massively violate the assumptions

Just so we're clear
============================================================
- Inflated $\alpha$ is not harmless
- But "researcher degrees of freedom" inflate $\alpha$ much more than all but the most extreme assumption violations
  - Stopping rules (test after every X participants, then stop as soon as you have a significant result)
  - Failing to report non-significant conditions
  - Failing to correct for multiple comparisons
- Don't let SPSS (or over-cautious textbooks) discourage you from running plain, simple ANOVAs
- Be honest and transparent about your data and how you collected them and you'll be fine.

Reporting a one-way ANOVA
============================================================
- Let's walk through it together
- I stole this data set from Andy Johnson
- We are investigating the effect of swearing on pain tolerance (see Stephens et al., 2009)
- Three groups: continuous use of swear word, neutral word, or no word whilst hand in cold water (DV = time until participant can't stand the pain and pulls hand from water)
```{r}
# open the data file (available on GitHub; don't forget to use setwd to set the working directory to where you put the file)
# setwd("C:/my_data/")
pain <- read.csv("pain.csv")
```

Get an idea of what's in the file
===========================================================
```{r}
head(pain)
str(pain)
```

Is the design balanced?
===========================================================
```{r}
table(pain$Swear.Condition)
```

How is the DV distributed?
===========================================================
```{r}
hist(pain$Time.In.Cold.Water)
```

Is the DV normal?
===========================================================
- Note: The raw DV does not have to be perfectly normal!
 - In fact, your alternative hypothesis is that it's not, since it is influenced by the treatment effect!
 - The error should be normal, though.
  - That is, the residual data that you get when you take the treatment effect out should be normal.
  - I'll show you how to test that in a second.

Calculate means and SDs
===========================================================
```{r}
library(ez)
#for ez, we need a subject identifier so the function can tell if it's a between or within or mixed subject design
pain$subject <- factor(1:nrow(pain)) # nrow(pain) = number of observations. Each observation is a subject
(pain_stats <- ezStats(data = pain, dv = Time.In.Cold.Water, wid = subject, between =  Swear.Condition))
```

Calculate means and SEs
===========================================================
```{r}
pain_stats
```
- This gives you a nice overview of the group sizes, group means, and group variance/
- N is the group size. It's the same for each group, so your design is balanced.
- The mean is almost the same for the neutral and the quiet conditions, but higher in the swear word condition.
- SDs are quite similar, so it doesn't seem like the homogeneity of variance assumption is an issue
- Fisher's Least Significant Difference (FLSD): gives you an idea of the minimum effect size that would be significant in a t-test between any of these groups. This is just an estimate, not a replacement for the ANOVA and a post-hoc test. 
  - Still useful to see which differences might be significant and which definitely aren't.
  
Plot means
==========================================================
```{r}
ezPlot(data = pain, dv = Time.In.Cold.Water, wid = subject, between = Swear.Condition, x = Swear.Condition)
```

Notes about the plot
==========================================================
- This plot is pretty good (better than anything SPSS gives you), but it is not perfect
- Discrete factors should be plotted as bars, not lines
- The error bars are Fisher's LSD, which is helpful in interpreting the differences, but unusual
- In a plot for publication, you would also want to change the axis labels
- I will give you a better function to use later
- For now, this is perfectly fine

Perform the ANOVA
==========================================================
```{r}
pain_anova <- ezANOVA(data = pain, dv = Time.In.Cold.Water, wid = subject, between = Swear.Condition, return_aov = TRUE)
```
- Note the `return_aov = TRUE`.
- We need that because we want to look at the residuals later.

Look at the results
==========================================================
```{r}
pain_anova$ANOVA
```
- Looks like there is a significant effect of swear condition.
```{r}
pain_anova$"Levene's Test for Homogeneity of Variance"
```
- No issues with homogeneity of variance.

Visually examine residuals
========================================================
```{r}
pain_residuals <- resid(pain_anova$aov)
hist(pain_residuals)
```
- Looks quite normal.

Quantile-Quantile Plot
========================================================
```{r}
qqnorm(pain_residuals)
qqline(pain_residuals)
```
- Plots the distribution of the variable in question against a hypothetical perfect normal distribution
- Deviations from the line are deviations from normality
- Our residuals are very slightly deviated. Is this an issue? Probably not.

Formally test normality of residuals
=========================================================
- Shapiro-Wilk normality test
```{r}
shapiro.test(pain_residuals)
```
- Not significant at all. No issues with non-normality.

Perform post-hoc pairwise comparisons
=========================================================
```{r}
(pain_pairwise_p_values <- with(pain, pairwise.t.test(x = Time.In.Cold.Water, g = Swear.Condition, pool.sd = FALSE, p.adj = "bonferroni")))
```
- These are the p-values for all the possible t-tests (Bonferroni correction applied)

Perform post-hoc pairwise comparisons
=========================================================
- Better: Use Holm's correction instead of Bonferroni's correction for higher power
```{r}
(pain_pairwise_p_values <- with(pain, pairwise.t.test(x = Time.In.Cold.Water, g = Swear.Condition, pool.sd = FALSE, p.adj = "holm")))
```

Perform post-hoc pairwise comparisons
=========================================================
- If you have no issues with homogeneity of variance, you can use the same pooled sd for all the tests:

```{r}
(pain_pairwise_p_values <- with(pain, pairwise.t.test(x = Time.In.Cold.Water, g = Swear.Condition, pool.sd = FALSE, p.adj = "holm")))
```

Alternative: Tukey's HSD
==========================================================
```{r}
TukeyHSD(x = pain_anova$aov)
```
- Another way of correcting for multiple comparisons. Assumes equal variance.

Now: report it
==========================================================
I'll show you how in Homework 3.
Advanced Statistics
========================================================
author: Bernhard Angele
date: Class 1 (supplement), October 2, 2014


R commands and functions used so far
========================================================
- Distribution functions
  - Get an overview of all of them by typing `?Distributions` at the command prompt
  - The function names follow a common pattern, where `xxx` stands for the abbreviated name of the distribution
    - Probability density function (PDF): `dxxx`, e.g. `dnorm`
    - Cumulative probability function (CDF) = area under the curve: `pxxx`, e.g. `pnorm`
    - Quantile function (allows you to specify the area under the curve and gives you the corresponding x value) = area under the curve: `pxxx`, e.g. `rnorm`
    - Random generator (generates random samples from the distribution): `rxxx`, e.g. `rnorm`

Using distribution functions
========================================================
- Examples
  - Generate 4 numbers from a normal distribution with mean = 10 and sd  = 5
  ```{r}
  rnorm(n = 4, mean = 10, sd = 5)
  ```
  - What's the probability of getting a value greater or equal to 22 from that distribution?
  ```{r}
  1 - pnorm(22, mean = 10, sd = 5)
  ```

Using distribution functions
========================================================
- More examples
  - What x value is greater or equal to 95% of the samples from that distribution (mean = 10, sd = 5)?
  ```{r}
  qnorm(.95, mean = 10, sd = 5)
  ```
  - Draw the curve of that distribution:
  ```{r}
  curve(dnorm(x, mean = 10, sd = 5), from = 6, to = 14)
  ```

More R techniques used so far
=======================================================
- Calling functions with arguments
  - Most functions will expect some kind of input
    - e.g. `mean` expects a vector of numbers
    ```{r}
    my_data <- c(23,6,78,4,3,2)
    mean(x = my_data)
    ```
  - You do not have to call the arguments by name:
    ```{r}
    my_data <- c(23,6,78,4,3,2)
    mean(my_data)
    ```
    
Function arguments
=======================================================    
- If you do not name the arguments of a function, they will be interpreted in the order that they are specified in the help file for the function (which you can get like this: `?rnorm`):
  - e.g. `rnorm` expects the arguments `n`, `mean`, and `sd`
```{r}
  rnorm(n = 5, mean = 10, sd = 2)
  rnorm(5,10,2)
```
- Specifying non-existent arguments will give you an error:
```{r}
  rnorm(cats = 3)
```

Default arguments
=======================================================
- Some arguments have default values
  - You can find those out in the help file.
  - For example, `rnorm` has `mean = 0` and `sd = 1` -- the standard normal distribution
  - This can save you a lot of typing:
  ```{r}
  rnorm(n = 3, mean = 0, sd = 1)
  rnorm(3)
  ```
  - Not all arguments have default values:
  ```{r}
  rnorm()
  ```
More R techniques used so far (2)
=======================================================  
- Nesting functions
  - You can run a function on the output of another function.
  - Example: Get the mean of a random sample of 100 from the standard normal distribution
  ```{r}
  mean(rnorm(100))
  ```

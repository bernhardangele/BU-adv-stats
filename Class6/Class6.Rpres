Advanced Statistics
========================================================
author: Bernhard Angele
date: Class 6, 13/11/2014

Last class
========================================================
- Time really flies when you are having fun, right?
- On the agenda for today:
    - Contrasts
    - Transformations
    - Logistic regression
    - Linear mixed models
    - Power
    - Non-parametric tests (and why we didn't talk much about them)
- Also: Assignment 2
- Assignment 1 marks:
    - By Dec 1st -- plenty of time to incorporate my feedback for Assignment 2.

Contrasts
========================================================
- The link between multiple regression and ANOVA
- Using dummy coding to turn a discrete variable into a number of "continuous" contrasts
- Many possible contrasts -- you can make your own!
    - Not very many *sensible* contrasts.
- Basic principles: A factor with $k$ levels gets split into $k-1$ contrasts.
    - i.e. one contrast per degree of freedom
- Contrasts can be, but don't have to be, **orthogonal**
    - orthogonal contrasts don't share any variance
    - non-orthogonal contrasts are fine to use, but they may be correlated
        - remember the pitfalls of multicollinearity!
        
Example
========================================================
- Enough about cats, let's talk about dogs!
- In this ficticious example, let's assume we are testing 45 dogs to see how many object names they know (e.g. when you tell them to bring you a "ball", "stick", etc., do they bring you the correct object or a random one?)
- Our sample contains 15 beagles, 15 border collies, and 15 terriers.
- Let's assume that the true means for each breed are:

| Breed        | Number of object names known|
|-------------:|----------------------------:|
| Beagle       |                           10|
| Border Collie|                           60|
| Terrier      |                           15|

Example (2)
========================================================
- With 3 means, there are (at least) 3 comparisons we can make

| Comparison              | Difference                  |
|------------------------:|----------------------------:|
| Border Collie -- Beagle |                           50|
| Border Collie -- Terrier|                           35|
| Terrier -- Beagle       |                            5|

- Let's see how the contrasts reflect these comparisons
  - But remember -- we can only make 2.
  
Generating the data
========================================================
- Feel free to skip over this if you don't care about how we generate the fake data
```{r}
# Seed for random number generators, so that we all get the same results
set.seed("6")
# Column 1: Breed - repeat each breed name 15 times, then combine
breed <- c(rep("Beagle", 15), rep("Border Collie", 15), rep("Terrier", 15))
# Column 2: Objects - repeat each true group mean 15 times, then combine
objects <- c(rep(10, 15), rep(60, 15), rep(15, 15))
```

Generating the data (2)
========================================================
- You can still skip this if you must...
```{r}
# Add random noise to the objects scores
objects <- objects + rnorm(n = 45, mean = 0 , sd = 6)
# for more realism, round the objects scores to full integers
# (what does it mean if a dog knows a fraction of an object?)
objects <- round(objects, digits = 0)
# Combine into data frame
dogs <- data.frame(breed, objects)
```

The data
========================================================
```{r}
# get the means for each breed
mean(dogs[dogs$breed == "Beagle",]$objects)
mean(dogs[dogs$breed == "Border Collie",]$objects)
mean(dogs[dogs$breed == "Terrier",]$objects)
# or do it all in one go:
tapply(X = dogs$objects, INDEX = dogs$breed, FUN = mean)
```

Comparing the means
========================================================
- We can always do pairwise *t*-tests. Those give us all the comparisons, but at the cost of making multiple comparisons.
```{r}
pairwise.t.test(x = dogs$objects, g = dogs$breed)
```

Adding contrasts
========================================================
- Let's make "breed" into a factor
```{r}
dogs$breed <- factor(dogs$breed)
```
- R automatically assigns *treatment* contrasts to each factor, which you can look at using the `contrasts` command:
```{r}
contrasts(dogs$breed)
```
- "Beagle" is the baseline level here. Why? Because it comes first alphabetically and R really has no way to know if there is another baseline level that would suit you more.

What does this contrast matrix mean?
========================================================
```{r, results='asis', echo=FALSE}
library(knitr)
contrast_matrix <- contr.treatment(3)
colnames(contrast_matrix) <- c("x1","x2")
rownames(contrast_matrix) <- c("Beagle","Border Collie","Terrier")
kable(contrast_matrix)
```
- When doing a regression analysis, R will replace the factor "breed" with two contrasts, $x_1$ and $x_2$
- $x_1$ will be 1 for all "Border Collie" cases, and 0 otherwise
- $x_2$ will be 1 for all "Terrier" cases, and 0 otherwise
- Why is this a good idea?

How contrasts work
=========================================================
- Remember the linear regression equation:
- $y_{i} = \beta_0 + \beta_1 x_{1} + \beta_2 x_{2} + \epsilon_i$
- i.e. the predicted value for $y_i$ is $\hat{y_i} = \beta_0 + \beta_1 x_{1} + \beta_2 x_{2}$
- Now let's substitute in the values from the table if breed is "Beagle":
```{r, results='asis', echo=FALSE}
contrast_matrix <- contr.treatment(3)
colnames(contrast_matrix) <- c("x1","x2")
rownames(contrast_matrix) <- c("Beagle","Border Collie","Terrier")
kable(contrast_matrix)
```
- $\hat{y_{i}} = \beta_0 + \beta_1 \times 0 + \beta_2 \times 0 = \beta_0$
- The predicted value for the Beagle group is $\beta_0$, the intercept
- That means that in this analysis, the intercept will reflect the mean for the Beagle group (10)

How contrasts work (2)
=========================================================
- The predicted value for $y_i$ is still $\hat{y_i} = \beta_0 + \beta_1 x_{1} + \beta_2 x_{2}$
- Now let's substitute in the values from the table if breed is "Border Collie":
```{r, results='asis', echo=FALSE}
contrast_matrix <- contr.treatment(3)
colnames(contrast_matrix) <- c("x1","x2")
rownames(contrast_matrix) <- c("Beagle","Border Collie","Terrier")
kable(contrast_matrix)
```
- $\hat{y_{i}} = \beta_0 + \beta_1 \times 1 + \beta_2 \times 0 = \beta_0 + \beta_1$
- The predicted value for the Border Collie group is $\beta_0 + \beta_1$, i.e. the sum of the intercept and the first slope $\beta_1$
- That means that in this analysis, the slope $\beta_1$ will reflect the difference between the mean for the Border Collie group and the mean for the Beagle group ($60 - 10 = 50$)

How contrasts work (2)
=========================================================
- The predicted value for $y_i$ is still $\hat{y_i} = \beta_0 + \beta_1 x_{1} + \beta_2 x_{2}$
- Now let's substitute in the values from the table if breed is "Terrier":
```{r, results='asis', echo=FALSE}
contrast_matrix <- contr.treatment(3)
colnames(contrast_matrix) <- c("x1","x2")
rownames(contrast_matrix) <- c("Beagle","Border Collie","Terrier")
kable(contrast_matrix)
```
- $\hat{y_{i}} = \beta_0 + \beta_1 \times 0 + \beta_2 \times 1 = \beta_0 + \beta_2$
- The predicted value for the Border Collie group is $\beta_0 + \beta_2$, i.e. the sum of the intercept and the second slope $\beta_2$
- That means that in this analysis, the slope $\beta_1$ will reflect the difference between the mean for the Terrier group and the mean for the Beagle group ($15 - 10 = 5$)

Let's try it
==========================================================
```{r}
lm(data = dogs, objects ~ breed)
```
- Looks just about right (remember, the means differ from the true population means because this is a -- simulated -- sample and contains random error)

Let's do the hypothesis tests
==========================================================
- First, the ANOVA:
```{r}
anova(lm(data = dogs, objects ~ breed))
```

Now, the contrasts
==========================================================
```{r}
summary(lm(data = dogs, objects ~ breed))
```

Interpreting the hypothesis tests
========================================================
- Note that we are testing the $H_0$ that $\beta_0$, $\beta_1$, $\beta_2$ are 0.
- R helpfully calls the observed coefficients $b_1$ `breedBorder Collie` and $b_2$ `breedTerrier`.
- Remember what we said about the coefficients?
- $\beta_0$ (the intercept) reflects the mean for the Beagle group
- If the intercept is significantly different from 0, that's not that interesting (but at least it is evidence that the beagles can learn more than 0 object names)
- The first slope $\beta_1$ reflects the difference between the Border Collie group and the Beagle group
- If this difference is significant, it means that there is evidence that Border Collies know more object names than Beagles

Interpreting the hypothesis tests (2)
========================================================
- The second slope $\beta_2$ reflects the difference between the Terrier group and the Beagle group
- If this difference is significant, it means that there is evidence that Terriers know more object names than Beagles
- Looking at the *t*-test results, $b_1$ is significantly different from 0, but $b_2$ isn't.
- There's a significant difference in terms of object names known between Beagles and Border Collies, but not between Beagles and Terriers
- Note that we are only doing two comparisons -- that's all we can do.

Trying different contrasts
=========================================================
- We can try some different contrast coding schemes to see how they work
- We can do this here because there are fake data and we know the actual means
- With real data, you need to plan your contrasts **before** you analyse your data (ideally, before you even collect them)
    - That's why they are called **planned** contrasts as opposed to **post hoc**.
- You can't even look at the means first!
- Otherwise, you're cheating. This is far worse than a small violation of normality or homoscedasticity!

What other contrasts does R have?
========================================================
- Sum/deviation contrasts
- (Reverse) Helmert contrasts
- many more
- Make your own!

Sum (or deviation) contrasts
==========================================================
```{r, results='asis'}
contrasts(dogs$breed) <- contr.sum
kable(coef(summary(lm(data = dogs, objects ~ breed))))
```

Interpreting sum/deviation contrasts
===========================================================
- The intercept $\beta_0$ is the grand mean of all the observations ($28.33$)
- $\beta_1$ is the difference between the grand mean and the mean of Beagle ($10 - 28.33 = -18.33$)
- $\beta_2$ is the difference between the grand mean and the mean of Border Collie ($60 - 28.33 = 31.67$)
- Terrier is never explicitly compared to the grand mean.
- In general: each level (except for the last level) is compared to the grand mean.

(Reverse) Helmert contrasts
==========================================================
```{r, results='asis'}
contrasts(dogs$breed) <- contr.helmert
kable(coef(summary(lm(data = dogs, objects ~ breed))))
```

Interpreting (reverse) Helmert contrasts
========================================================
- The intercept $\beta_0$ is the grand mean of all the observations ($28.33$)
- $beta_1$ is half of the difference between the mean of Beagle and the mean of Border Collie ($(60 - 10)/2 = 25$)
- $beta_2$ is half of the difference between the joint mean of Beagle and Border Collie and the mean of Terrier ($(15 - (60+10)/2)/2 = -10$)
- In general: each level is compared to the mean of the previous levels

Make your own contrasts
==========================================================
- General rules: You have one contrast per degree of freedom
- The dummy values in each contrast should sum to 0 (so that your intercept will be the grand mean)
- The sum of the absolute values of the dummy values in each contrast should be 2
- If you want to compare two levels, set one to be -1 and the other to be 1
- Factor levels that you don't want to compare should be set to 0


Example
==========================================================
- I want to compare level 1 (Beagle) to level 3 (Terrier):

|             | x1 | x2|
|------------:|---:|--:|
|Beagle       |   1|TBD|
|Border Collie|   0|TBD|
|Terrier      |  -1|TBD|

- This contrast sums to 0, so the intercept should be the grand mean (unless the other contrast is something really crazy)
- The absolute values sum to 2
- The coefficient will be $Mean(Terrier) - Mean(Beagle)$, so it will be positive if the mean for Terrier is greater than that for Beagle and negative if $Mean(Beagle) > Mean(Terrier)$

More complex comparisons
==========================================================
- To compare a mean of two factor levels to the mean of another factor (e.g. the mean of Beagle and Terrier vs. the mean of Border Collie), split them up: 
    - Set the two levels that you want to take the mean of both to .5 or -.5
    - Then set the third level to -1 or 1, respectively
    - The rules still hold:
        - The dummy values in each contrast should sum to 0 (so that your intercept will be the grand mean)
        - The absolute values should sum to 2
        - Factor levels that you don't want to compare should be set to 0

Example (continued)
==========================================================
- I want to compare level 1 (Beagle) to level 3 (Terrier):

|             | x1 | x2|
|------------:|---:|--:|
|Beagle       |   1|-.5|
|Border Collie|   0|  1|
|Terrier      |  -1|-.5|

- Both contrasts sum to 0, so the intercept should be the grand mean
- The absolute values sum to 2
- The coefficient for x2 will be $Mean(Terrier) - Mean(Beagle)$, so it will be positive if the mean for Terrier is greater than that for Beagle and negative if $Mean(Beagle) > Mean(Terrier)$

Defining your own contrast coding
========================================================
- You'll need the library "MASS"
    - If you don't have it yet, install it: `install.packages("MASS")`
- Put together the contrast matrix:
```{r}
x1 <- c(1, 0, -1)
x2 <- c(-.5, 1 , -.5)
# cbind: bind the vectors together as columns in a matrix
my_contrasts <- cbind(x1, x2)
```

Defining your own contrast coding (2)
========================================================
- Now you can assign the contrasts
- Important: you don't actually assign your home-made contrast matrix itself, but rather the transposed generalised inverse of the matrix
    - Why? That's just how R expects to get the contrasts...
- The only thing you need to be aware of is that `ginv` requires the `MASS` package to be loaded:
```{r}
library(MASS)
contrasts(dogs$breed) <- t(ginv(my_contrasts))
```

Interpreting the results
=======================================================
```{r, results='asis'}
kable(coef(summary(lm(data = dogs, objects ~ breed))))
```
- The intercept $\beta_0$ is the grand mean of all the observations ($28.33$)
- $\beta_1$ is the difference between the mean of Beagle and the mean of Terrier ($10 - 15 = -5$)
- $\beta_2$ is the difference between the mean of Beagle and Terrier together and the mean of Border Collie ($60 - (10+15)/2 = 47.5$)
- Once again, notice that the sample coefficients $b_0$, $b_1$, and $b_2$ are not *exactly* the same as the population coefficients $\beta_0$, $\beta_1$, and $\beta_2$.

Orthogonality of contrasts
=======================================================
- If contrasts are orthogonal, that means they do not share any variance
    - i.e. they are not correlated
- You can find out if your hand-made contrasts are orthogonal:
- Calculate the product of each row
- If the row products sum up to 0, the contrast is orthogonal:

|             | x1 | x2| x1*x2|
|------------:|---:|--:|-----:|
|Beagle       |   1|-.5|   -.5|
|Border Collie|   0|  1|     0|
|Terrier      |  -1|-.5|    .5|
|*Total*      |   0|  0|     0|

- Are our contrasts orthogonal? Yes!

Orthogonality of contrasts (2)
=======================================================
- Contrasts do not have to be orthogonal (also known as *independent*).
- But be aware that correlated contrasts may cause multicollinearity issues
    - Especially if you have an unbalanced design
    - Especially if you have an interaction design
- As long as you are aware of what exactly you are doing, you'll be fine
- As soon as you no longer know what you're doing, ask for help!

Transformations
========================================================
- In some cases, our dependent variable will not be normally distributed
- Example: reaction times -- you get a long right tail of slow responses
    - Fixation times in eye movements are very similar

Example
========================================================
- For example, the probability density function for fixation durations might look like this:

```{r, echo = FALSE}
curve(dlnorm(x, 5.5, .3), from = 0.1, to = 1000)
```

Example data
========================================================
- Example experiment: how long do people look at swear words vs. non-swear words?
    - Let's assume that the true means are 250 ms for non swear words and 300 ms for swear words
- Let's generate data based on this assumption
```{r}
set.seed("11233")
# 60 subjects
word_condition <- factor(c(rep("swear word", 30), rep("non swear word", 30)))
# rlnorm: Generate random samples from the lognormal distribution
fixation_time <- c(rlnorm(n = 30, mean = log(250), sd = .3), rlnorm(n = 30, mean = log(265), sd = .3))
swear_exp <- data.frame(word_condition, fixation_time)
```

Running a linear model
========================================================
```{r}
linear_model <- lm(data = swear_exp, fixation_time ~ word_condition)
summary(linear_model)
```

Assumption test
========================================================
```{r}
shapiro.test(resid(linear_model))
```
- Clearly not normal!
- But notice how robust the analysis is. We still find the effect!
- Nevertheless, better to run a proper model with log transformed values as the dependent vairable


Running a log model
========================================================
```{r}
log_model <- lm(data = swear_exp, log(fixation_time) ~ word_condition)
summary(log_model)
```

Assumption test
========================================================
```{r}
shapiro.test(resid(log_model))
```

How to interpret a log model
========================================================
- Formula: $ln(y_{i}) = \beta_0 + \beta_1 x_{i1} + \beta_2 x_{i2} + \epsilon_i$
- Let's rewrite that: $y_{i} = e^{\beta_0 + \beta_1 x_{i1} + \beta_2 x_{i2} + \epsilon_i} = e^{\beta_0} \times e^{\beta_1x_{i1}} \times e^{\beta_2x_{i2}}$
    - If this confuses you: we are using the natural logarithm ($ln$; R somewhat confusingly calls it `log`) here. This is a logarithm to the base $e ~ 2.718$. Maybe you'll remember that $e^{ln(x)} = x$
- Log models are *multiplicative* rather than *additive*

How to interpret a log model (2)
========================================================
- Example: Our swear word fixation time study
    - Fitted model: $ln(y_{i}) = 5.683 - .195 \times x_i$
    - Remember: We're using treatment contrasts. $x_i$ is 0 for non swear words and 1 for swear words
    - Predicted value for non swear words: $e^{5.683} \times e^{-.195 \times 0} = e^{5.683} =  293.82$
    - Predicted value for swear words: $e^{5.683} \times e^{-.195 \times 1} = 293.82 \times e^{-.195} = 293.82 * .823 = 241.81$
- Conclusion: Fixation times on swear words were 17.7% lower than fixation times on non swear words (*b* = -.195, *SE* = .074, *t* = -2.63, *p* = .011).

Logistic regression
========================================================
- What if we have a dichotomous dependent variable?
    - Yes vs. no, error vs. no error, alive vs. dead, pregnant vs. not pregnant
- Our example (from A. Johnson): Factors that make (or don't make) you fail your driving test
- 90 candidates
- Dependent variable: `Driving.Test`
- Predictor variables:
    - `Practice`: in hours
    - `Emergency.Stop`: Whether the candidate performed the emergency stop (yes or no)
    - `Examiner`: How difficult the examiner is (on a scale from 0 = easy to 100 = extremely difficult)
    - `Cold.Remedy`: How many doses of cold remedy the candidate had before the test

Where to start?
=========================================================
- We would like to use our standard regression model $y_{i} = \beta_0 + \beta_1 x_{i1} + \beta_2 x_{i2} + \epsilon_i$
- But our data are definitely not normally distributed (they aren't even continuous)
- First step: represent the data as probabilities rather than Yes or No
    - What's the probability of passing the test given that I've had (at most) 20 hours of practice, did my emergency stop, had at most an average examiner (50) and had only one cup of cold remedy?
    - Probabilities are still weird: They only go from 0 to 1, and they also aren't great for linear relationships
    - Let's try something else: odds
    
Probability and odds
========================================================
- Very popular in betting, since they make it easy to estimate the payout
- $Odds = \frac{P}{1-P}$
- For example: 
      - $P = .5$ gives you even odds $\frac{.5}{.5} = 1/1$
      - $P = .25$ gives you $\frac{.25}{.75} = 1/3$
      - $P = .75$ gives you $\frac{.75}{.25} = 3/1$
- Odds are nice because they aren't bounded, but for high probabilities they get very large very quickly ($P = .99 \Leftrightarrow Odds = 99/1$) and for small probabilities, they get very small very quickly ($P = .01 \Leftrightarrow Odds = 1/99$)
- What to do?

Log odds (logits)
=========================================================
- Just transform our odds (just like we did with our continuous fixation time variable earlier) by taking the natural logarithm: $logit = ln(Odds) = ln(\frac{P}{1-P})$
- Now we have a dependent measure that is suitable for linear relationships
- Our new logistic regression model is $ln(\frac{P}{1-P}) = \beta_0 + \beta_1 x_{i1} + \beta_2 x_{i2} + \epsilon_i$
- If we want to get back to probabilities, we can exponentiate both sides of the equation: $\frac{P}{1-P} = e^{\beta_0 + \beta_1 x_{i1} + \beta_2 x_{i2} + \epsilon_i}$
- Solving this for $P$: $P = \frac{e^{\beta_0 + \beta_1 x_{i1} + \beta_2 x_{i2} + \epsilon_i}}{1 + e^{\beta_0 + \beta_1 x_{i1} + \beta_2 x_{i2} + \epsilon_i}} = \frac{1}{1 + e^{-(\beta_0 + \beta_1 x_{i1} + \beta_2 x_{i2} + \epsilon_i)}}$

How do you fit a logistic regression line?
=========================================================
- Least squares won't work
- We can evaluate the **likelihood** of the parameters instead
- Probability: observations given parameters
- Likelihood: parameters given observations

Calculating likelihood
========================================================
- Very simple example: Let's assume we have the following data from flipping a coin: $Y = (H H H T H T H H)$
- Likelihood is the product of all the probabilities given a certain parameter value. In this case, we are trying different parameter values for the probability: 
    - We usually call the observed probability $p$, but since we are trying different population parameters, we'll give it a greek letter and call our population probability of observing "heads" (ignoring order) $\pi$ (that is, pi)
- $\pi = .5$: $L(Y|\pi = .5) = .5 \times .5 \times .5 \times .5 \times .5 \times .5 \times .5 \times .5 = .5^8 = .00039$
- $\pi = .25$: $L(Y|\pi = .35) = .25 \times .25 \times .25 \times .75 \times .25 \times .75 \times .25 \times .25 = .25^6 \times .75^2 = .00014$
    - $\pi = .25$ has a lower likelihood than $\pi = .5$.
- Let's try $\pi = .75$: $L(Y|\pi = .75) = .75 \times .75 \times .75 \times .25 \times .75 \times .25 \times .75 \times .75 = .75^6 \times .25^2 = .00111$
    - This is the highest one yet.

The likelihood function for logistic regression
========================================================
- Do you see a pattern here? For each element $Y_i$ in $Y$, the likelihood of $\pi$ is either
    - $L(Y_i|\pi) = \pi$ if $Y_i = H$, (e.g. $.75$ for $\pi = .75$), or
    - $L(Y_i|\pi) = 1 - \pi$ if $Y_i = T$, (e.g. $.25$ for $\pi = .75$)
- Then you get the likelihood for the full data set $Y$ by multiplying all the individual likelihoods
    - $L(Y|\pi) = \prod_{i = 1}^N{L(Y_i|\pi)}$
- You can simplify this a bit if you replace H with 1 and T with 0:
    -  $L(Y_i|\pi) = \pi^{Y_i} \times (1-\pi)^{(1-Y_i)}$
    - And combining the two equations above:
        - $L(Y|\pi) = \prod_{i = 1}^N\pi^{Y_i} \times (1-\pi)^{(1-Y_i)}$

Maximum likelihood
========================================================
- Likelihood gets a little unwieldy -- lots of very small numbers
    - Solution: take the log (who would have thought?)
        - Added bonus: Now our multiplication becomes a sum (remember that from calculus?)
          $log\;likelihood = \sum_{i = 1}^N Y_i\times ln(\pi) + (1-Y_i)\times ln(1-\pi)$
- Now we can simply try different values of $\pi$ until we find the one with the maximum likelihood
    - Remember that in logistic regression, $\pi$ is defined by our regression equation: $\pi = \frac{1}{1 + e^{-(\beta_0 + \beta_1 x_{i1} + \beta_2 x_{i2} + \epsilon_i)}}$ 
    - Instead of simply trying different values of $\pi$, we have to try different values for $\beta_0$, $\beta_1$, etc. and compute $\pi$. This gets to be quite a lot of work.
    - Trying different values might not seem particularly elegant, but this is essentially what R or SPSS do -- no simple solution like with least-squares regression or ANOVA exists
      - This is (relatively) processing-intensive. One reason why psychologists didn't use logistic regression in the statistics-by-hand era.
      
Log likelihood as an indicator of model fit
=======================================================
- The log likelihood (LL) of the final model is an indicator of how well the model fit the data, just like $R^2$.
    - In fact, there are several ways to estimate $R^2$ from the log likelihood
- Log likelihood also enables us to make model comparisons
    - The test statistic in that case is $\chi^2$ -- more about that later
- Another measure is *deviance*, which is simply $-2$*LL
    - Conceptually, deviance is like the residual variance.
        - In the case of deviance, lower is better, of course.
- Closely related to this is Akaike's Information Criterion (AIC), which is -2LL+2*number of parameters (lower is better, so adding parameters makes the AIC worse)

Enough maths, let's just run this model
=======================================================
- These are our data (first 6 rows):
```{r, results='asis'}
driving_tests <- read.csv("driving_tests.csv")
kable(head(driving_tests))
```

Fitting the model
========================================================
- We use `glm` instead of `lm` (short for generalised linear model)
- We tell `glm` that our data are binomial and we want to use the logit function as the link
- Note that, for simplicity, we're not investigating interactions here (let's assume that in this example we simply aren't interested in them)
```{r}
driving_glm <- glm(data = driving_tests, formula = Driving.Test ~ Practice + Emergency.Stop + Examiner + Cold.Remedy, family = binomial(link = "logit"))
```

Model summary
========================================================
```{r}
summary(driving_glm)
```

Model summary explained
========================================================
- Deviance residuals:
    - For these, we calculate the deviance separately for each case and then take the square root. We also change the sign depending on whether the observed case was 1 or 0:
    - $d_i = s_i \sqrt{-2(Y_i\times ln(\pi) + (1-Y_i)\times ln(1-\pi))}$
        - with $s_i = 1$ if $Y_i = 1$ and $s_i = -1$ if $Y_i = 0$

How to interpret logistic regression residuals
========================================================
- Can't test if they are normally distributed (because they are not)
- But look out for very large residuals
- You can get standardised residuals using `rstandard`.
    - Look out for cases that are far away from 0.
```{r, results='asis'}
driving_residuals <- rstandard(driving_glm)
plot(driving_residuals)
```

Model summary explained (2)
==========================================================
- The coefficients
```{r, echo=FALSE, results='asis'}
kable(coef(summary(driving_glm)))
```
- Analogous to linear regression: *b* value, *SE*, significance test
- Using the **Wald** statistic instead of *t* tests
    - $z = \frac{b}{SE_b}$
    - Can be interpreted like *z* values from a standard normal distribution (that's how the *p*-value is computed)

Interpreting the b values
==========================================================
- If you take the exponential of the coefficients (using `exp()` or `e^` in R), you get an **odds ratio**
- Odds ratio = Odds after a unit change in the predictor divided by the original odds
- Example: According to our model, each hour of practice increases the odds of passing the test by a factor of $e^{0.12959} = `r exp(.12959)`$
    - e.g. if the odds were even (1/1) for X hours of practice, they would be slightly better than even (1.138/1) for X+1 hours of practice
- On the other hand, each "unit" of examiner difficulty decreases the odds of passing the test by a factor of $e^{-0.03485} = `r exp(-.03485)`$
    - e.g. if the odds were even (1/1) for an instructor with a difficulty of X, they would be slightly worse than even (0.9658/1) for an instructor with a difficulty of X+1

Model summary explained (2)
==========================================================
- Null deviance: deviance from a model that estimates all values using the overall probability of passing the test (without taking into account the 4 predictors)
- Residual deviance: deviance from the current model (note that we're losing 4 df due to the 4 predictors)
- AIC: residual deviance + 2*model df (note that the model has 5 df, including one for the intercept)

Model comparisons (LRT)
==========================================================
- Deviance has some neat properties
    - We can compare likelihoods just like we compared mean squares in the F-test: by dividing them
    - That is, we compute a likelihood ratio: $LR = \frac{L_{baseline}}{L_{new}}$, where *baseline* is the simpler model and *new* the more complex model.
    - Now we can convert this likelihood ratio into a deviance: $deviance_{LR} = -2\frac{ln(L_{baseline})}{ln(L_{new})} = deviance_{baseline} - deviance_{new}$
    - And now the most fun part: If the $H_0$ that the two models explain the data equally well is true, this likelihood-ratio deviance is distributed according to a $\chi^2$ distribution.
    - The $\chi^2$ distribution has one parameter, degrees of freedom
    - $df = k_{new}$ - $k_{baseline}$, where $k$ is the number of parameters (including the intercept)

Model comparisons
==========================================================
- Now we can get a *p*-value! This is called the **Likelihood ratio test (LRT)**
- So, if we want to test if the model is better than a model with just the intercept, we can do an LRT
- $\chi^2 = deviance_{null} - deviance_{model} = 124.366 - 82.572 = 41.794$
- $df = k_{null} - k_{model} = 89 - 85 = 4$ 
- $p(\chi^2(4) \geq 41.794) < .01$
- This is equivalent to the overall F-test for the model.

Model comparisons (2)
========================================================
- We can use model comparisons to test how specific predictors contribute to the whole model (analogous to the F-tests in linear regression)
- For this, you can use the `Anova` command from the `car` package:
```{r}
library(car)
Anova(driving_glm)
```

Model comparisons (3)
========================================================
- This analysis of deviance follows the same logic as the ANOVA in the linear regression case
- You can do Type I, Type II, and Type III LRT tests (they are not sums of squares in this case)
- The LRTs are better tests than the Wald tests, since the Wald tests might be prone to overinflating the SE, leading to Type II error.
- You can also use the LRT to directly compare a model to another (just like in the linear regression case). For this, you can use the `anova` command (lower case `a`).

Diagnostics and assumption tests
========================================================
- We do not assume normality (so nothing to test for that one)
- All the influence measures from linear regression work in logistic regression as well
    - See Class 5 notes for explanations and criteria
```{r,results='asis'}
kable(head(influence.measures(driving_glm)$infmat))
```

Diagnostics and assumption tests (2)
========================================================
- Multicollinearity:
- You can get Variance Inflation Factors (VIFs)
    - Again, see Class 5 notes for explanations and criteria
```{r}
vif(driving_glm)
```

Linearity
=============================================================
- This is a new one: Test if the effects of the predictors on the logits are actually linear
- How to do it: run a model that includes interactions between each *continuous* predictor and its logarithm
- Test each interaction in a separate model
- If you have 0s in your data, you might need to replace them by a very small value since log(0) = -Inf
- If the interaction is significant, linearity is violated

Linearity (2)
=============================================================
```{r, results='asis'}
# remove 0s by adding a very small number to Cold.Remedy
# test each factor in a separate model
driving_tests$Cold.Remedy_no_0 <- driving_tests$Cold.Remedy + 1
driving_glm_linearity <- glm(data = driving_tests, formula = Driving.Test ~ Practice + Emergency.Stop + Examiner + Cold.Remedy_no_0 + Practice:log(Practice) + Examiner:log(Examiner) + Cold.Remedy_no_0:log(Cold.Remedy_no_0), family = binomial(link = "logit"))
```


Linearity(3)
=============================================================
```{r, results='asis'}
kable(coef(summary(driving_glm_linearity)))
```
- There is an issue with the linearity of Cold.Remedy, suggesting that this variable might have to be transformed/coded as a factor/etc.
    - Maybe this is why we don't see a significant effect?

Reporting it
=============================================================
A logistic regression was conducted where the dependent variable was passing a driving test and the predictor variables were hours of practice, whether an emergency stop was successfully executed, how much the examiner was difficult, and amount of 'cold remedy drinks' consumed.  90 cases were examined and the model was found to significantly predict whether the test was passed (omnibus chi-square = 41.79, df=4, p<.001). that practice and examiner were the only two variables that reliably predicted if the driving test was passed. Increases in practice was associated with increased rate of passing (odds of passing increased by 1.14 per hour of practice, *b* = .130, SE = .03, *z* = 4.28, *p* < .01). Increases in the examiner being an difficult reduced the rate of passing (odds of passing decreased by 0.96 per unit of difficulty rating, *b* = -.00349, SE = .013, *z* = -2.679, *p* < .01). None of the other predictors reached significance (all *p*s > .05). There were no issues due to multicollinearity or influential cases, however, the linearity assumption was violated for the cold remedy drinks predictor. 

Linear mixed models (LMMs)
============================================================
- The final step to greatness!
    - Note that we can really only scratch the surface here.
- Main issue:
    - We know how to to regressions for continuous and discrete DVs now
    - We know what the regression equivalent of a between-subjects ANOVA is and we can take the regression analysis much further than an ANOVA or ANCOVA would let us
    - However: 
        - What if we have a within-subject or repeated measures design?
        - What if there is some other underlying correlation in the data 
            - e.g. data collected from students in different classes in different schools
                - Surely the classes and schools share some variance -- how to account for that?
                
Moving from linear regression to linear mixed models
=============================================================
- In repeated-measures ANOVA, we've dealt with within-subjects effects by removing the variance due to subject differences from the error
    - Essentially, we have added a "subject" factor to the model
    - Linear mixed models enable us to do the same thing for regression analyses

Problem: how to add subject as a factor
=============================================================
- We could simply add a "subject" factor to the predictors
    - This would reflect the systematic differences between subjects
        - But that's not quite right: how do we deal with a factor with 40 levels?
            - Also, we want to generalise our model to more than those 40 subjects that are in the analysis
            - How do we do that?
    - Subject is really like a random variable: we get a different set each time we run the experiment
    - Instead of analysing the subject effect in a generalisable way, we really just want to get rid of the subject variance in the most efficient way possible

Problem: how to add subject as a factor (2)
=============================================================
- Fixed effects vs. random effects
    - Fixed effects: repeatable, generalisable (e.g. experiment condition)
    - Random effects: non-repeatable, sampled from a general population
    - Mixed effects models include both fixed and random effects
- Another issue with including subject as a fixed effect:
    - Each subject would take up a degree of freedom
    - That would majorly impact the power of our analysis
    - LMMs solve this issue by a procedure called **shrinkage**
    
Shrinkage
===============================================================
- Conceptually, LMMs allow subjects to have individual effects (e.g. in an eye-tracking experiment subject 1 might have an intercept of 200 ms, while subject 2 might have an intercept of 210 ms), but they pull each subject's effects
towards an underlying distribution of subject effects
- This reflects the idea that if 20 other subjects have intercepts between 180 and 220 ms, the current subject is unlikely to have an intercept of 400 ms, even though it looks like that from the data
- Shrinkage also helps majorly with missing data issues (although it won't fix them for you!)
- The downside of shrinkage is that it isn't clear what the df_{Error} should be
    - This leads to some issues later on.
    
Example
==============================================================
- To start with, let's install two packages: `lme4`, which is the package that enables R to fit linear mixed models, and `languageR`, which contains the data set we will use. To install these, enter `install.packages(c("lme4","languageR"))` at the console.

- We'll use the data set `lexdec` from `languageR` (Baayen, 2011)
    - This data set contains lexical decision latencies from 21 subjects for 79 English nouns.
    - In a lexical decision task, the subject has to decide whether the letters displayed on a screen form a word or not (the non-word data are usually discarded). The dependent variable is `RT` = ln(reaction time) (already transformed for your convenience)

Example: Predictors
========================================================
- We're going to use a number of interesting predictors
- Random effects:
    - Subject
    - Word (since we want to generalise our results for all words, not just the 79 in the data set)
- Fixed effects:
    - NativeLanguage: Whether the subject's native language was English
    - Correct: Whether subjects incorrectly classified the word as a non-word
    - Frequency: ln(Word frequency per million)
    - Class: Does the word refer to an animal or a plant?
    
    
Data cleanup
=========================================================
- These are real-world data, so they are bound to be messy
- Let's start with some general data exclusion
    - Extremely long reaction times are suspect -- maybe the subject fell asleep or just forgot to press the button
        - Exclude all reaction times > 1100 ms (7 in log-transformed RTs)
```{r}
library(languageR) # get the data from the package
lexdec2 <- subset(lexdec, RT < 7)
# This excludes 41 data points.
nrow(lexdec) - nrow(lexdec2)
```

Data cleanup
=========================================================
- We also only want to consider correct responses
    - Incorrect responses might not even tap into the linguistic processes that we are interested in.
```{r}
lexdec3 <- subset(lexdec2, Correct == "correct")
# This excludes only 61 further data points -- people are pretty good at this task.
nrow(lexdec2) - nrow(lexdec3)
```

Start with linear regression
=========================================================

```{r, results='asis'}
ld_lm <- lm(data = lexdec3, RT ~ NativeLanguage + Frequency + Class)
kable(coef(summary(ld_lm)))
```
- Unfortunately, we are massively violating the independence assumption: observations from the same subject (and word) are definitely correlated

Adding random effects
===========================================================
- Allow intercepts to vary by subject and word (random intercepts)
    - `1` stands for the intercept. It is implicit, *except* when there is no other predictor
```{r}
library(lme4)
ld_lmm <- lmer(data = lexdec, RT ~ NativeLanguage + Correct + Frequency + Class + (1|Subject) + (1|Word))
shapiro.test(resid(ld_lmm))
```
- Still significant? Time for some model diagnostics

Q-Q Plots
===========================================================
- Quantile-Quantile Plot: Split data into a number of quantiles and plot them against the quantiles of a hypothetical normal distribution

```{r}
qqnorm(resid(ld_lmm))
# if the distribution is normal, the points should be on this line
qqline(resid(ld_lmm))
```

Outlier removal
===========================================================
- The Q-Q plots of the residuals show a clear problem due to outliers on the right
- Let's deal with that by removing values that are more than 2 SDs away from the mean of the raw data
    - Careful with this kind of removal: you might remove your effect!
        - In this case, few enough cases are affected that this should not be a problem
```{r}
ld_clean <- subset(lexdec, abs(scale(resid(ld_lmm))) < 2.5)
# This is how many cases we remove. 79 out of 1659 seems OK.
nrow(lexdec) - nrow(ld_clean)
```

Re-do the linear regression model with the clean data
========================================================
```{r, results='asis'}
ld_lm <- lm(data = ld_clean, RT ~ NativeLanguage + Correct + Frequency + Class)
kable(coef(summary(ld_lm)))
```
- So far so good
```{r}
ks.test(resid(ld_lm), pnorm)
```
- Unfortunately, we are massively violating the independence assumption: observations from the same subject (and word) are definitely correlated

Adding random effects
===========================================================
- Allow intercepts to vary by subject and word (random intercepts)
    - `1` stands for the intercept. It is implicit, *except* when there is no other predictor
```{r}
library(lme4)
ld_lmm <- lmer(data = ld_clean, RT ~ NativeLanguage + Correct + Frequency + Class + (1|Subject) + (1|Word))
ks.test(resid(ld_lmm), pnorm)
```

Power in ANOVA
========================================================
- For the pain example last week:
  - 3 groups
  - 2 subjects per group
  - $\eta^2$ = .55
- Remember, $\eta^2 = \frac{SS_{Model}}{SS_{Total}}$
- R can calculate the power for a simple oneway ANOVA, but for anything more complex use G*Power (http://www.gpower.hhu.de/)
  - The same is true for SPSS

Using G*Power
========================================================

- Pick `F-Tests` as the `Test family`
- Pick the appropriate `Statistical test`
  - In this case, it's `ANOVA: Fixed effects, omnibus, one-way`
- Choose the `Type of power analysis`
  - That is, tell G*Power what information you have and what you want to know
  - Most commonly used:
    - `A priori`: You give G*Power your estimate of the effect size and the desired power, and it gives you the necessary sample size to achieve that power
    - `Post-hoc`: You give G*Power your effect size and the sample size from the analysis you have already done, and it gives you the power that your analysis had


Using G*Power (2)
========================================================
- How to get the effect size:
  - Click `Determine =>` next to the `Effect size f` field
  - Make sure `Select procedure` in the sidebar that opened is set to `Effect size from variance`
  - If you've already run your analysis and have your $\eta_G^2$ (`ges` in ezANOVA) or $\eta_P^2$ (partial eta-squared in SPSS) estimate, click on `Direct` and enter the value in the Partial $\eta^2$ field
  - Click on `Calculate and transfer to main window`
- If you are doing an a priori analysis or for some reason you don't have an $\eta^2$ estimate, you can get your effect size by setting `Select procedure` to `Effect size from means` and then entering your group means, your within-group standard deviation ($\sigma$), and group sizes in the table


Using G*Power (3)
========================================================
- Now fill in the rest of the input parameters
- Leave $\alpha$ `err prob` at .05 unless for some reason you're not testing at a 5% $\alpha$ level
- Click `Calculate`
- G*Power will come up with a nice plot of F distribution based on the $H_0$ (red line), the distribution if the true effect has the entered effect size (dashed blue line), the critical F value, and your $\alpha$ and $\beta$ error regions 
- If you are running a post-hoc analysis: The `Power` (1-$\beta$ err prob) field will contain your power estimate
- If you are running an a priori analysis: `The total sample size` field will contain your necessary sample size

